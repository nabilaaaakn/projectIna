# -*- coding: utf-8 -*-
"""machine learning jantung.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17mmOZwCJ05Hbe1kwRBcLdxpSV5rpFfLJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('heart.csv')
df

df.isnull().sum()

# Kolom numerik yang akan diperiksa
numerical_columns = ["age",	"sex",	"cp", "trestbps",	"chol",	"fbs", "restecg",	"thalach",	"exang",	"oldpeak",	"slope",	"ca",	"thal",	"target"]

# Visualisasi awal dengan boxplot
plt.figure(figsize=(12, 6))
df.boxplot(column=numerical_columns, vert=False, patch_artist=True)
plt.title('Boxplot Sebelum Membersihkan Outliers')
plt.show()

# Fungsi untuk membersihkan outliers menggunakan IQR
def clean_outliers_iqr(df, columns):
    Q1 = df[columns].quantile(0.25)
    Q3 = df[columns].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[~((df[columns] < lower_bound) | (df[columns] > upper_bound)).any(axis=1)]

# Menyimpan jumlah data sebelum pembersihan
before_cleaning = df.shape[0]

# Membersihkan outliers
df_cleaned = clean_outliers_iqr(df, numerical_columns)

# Menyimpan jumlah data setelah pembersihan
after_cleaning = df_cleaned.shape[0]

# Menampilkan jumlah data sebelum & sesudah
print(f"Jumlah data sebelum pembersihan: {before_cleaning}")
print(f"Jumlah data setelah pembersihan: {after_cleaning}")

# Visualisasi setelah pembersihan dengan boxplot
plt.figure(figsize=(12, 6))
df_cleaned.boxplot(column=numerical_columns, vert=False, patch_artist=True)
plt.title('Boxplot Setelah Membersihkan Outliers')
plt.show()

df_cleaned

# Menampilkan Matrix Kolerasi Antar Kolom
df.corr()

# Menghitung matriks korelasi
correlation_matrix = df_cleaned[numerical_columns].corr()

# Membuat heatmap dengan seaborn
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Heatmap Korelasi Antar Variabel')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Menghitung jumlah pasien dengan dan tanpa penyakit jantung berdasarkan tipe nyeri dada (cp)
cp_counts = df.groupby(['cp', 'target']).size().unstack(fill_value=0)

# Menghitung persentase
cp_percentages = cp_counts.div(cp_counts.sum(axis=1), axis=0) * 100

# Membuat plot
fig, ax = plt.subplots(figsize=(10, 6))

# Warna untuk kategori
colors = ['green', 'red']

# Variabel untuk membantu penumpukan bar
left_values = np.zeros(len(cp_percentages))

# Menambahkan bar dan label
for i, category in enumerate(cp_percentages.columns):
    ax.barh(
        cp_percentages.index,
        cp_percentages[category],
        left=left_values,
        color=colors[i],
        label='Tidak Ada Penyakit Jantung' if category == 0 else 'Ada Penyakit Jantung',
        edgecolor='black'
    )

    # Menambahkan label pada setiap bar
    for j, value in enumerate(cp_percentages[category]):
        ax.text(
            left_values[j] + value / 2,  # Posisi label di tengah bar
            j,
            f'{value:.1f}%',
            ha='center',
            va='center',
            fontsize=10,
            color='white' if category == 0 else 'black'
        )

    # Update posisi left
    left_values += cp_percentages[category]

# Menambahkan judul, label, dan legenda
ax.set_title('Persentase Pasien dengan dan Tanpa Penyakit Jantung Berdasarkan Tipe Nyeri Dada', fontsize=14)
ax.set_xlabel('Persentase (%)', fontsize=12)
ax.set_ylabel('Tipe Nyeri Dada (cp)', fontsize=12)
ax.set_yticks(cp_percentages.index)
ax.set_yticklabels(['Typical Angina', 'Atypical Angina', 'Non-anginal Pain', 'Asymptomatic'])  # Sesuai kategori di dokumentasi dataset
ax.legend(title='Kategori', fontsize=10)

# Menampilkan plot
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Membuat histogram untuk membandingkan distribusi thalach berdasarkan target
fig, ax = plt.subplots(figsize=(10, 6))

# Warna untuk kategori
colors = ['green', 'red']

# Membuat histogram untuk masing-masing kategori target
for target_value, color in zip([0, 1], colors):
    subset = df[df['target'] == target_value]
    ax.hist(subset['thalach'], bins=20, alpha=0.6, color=color, edgecolor='black', label='Tidak Ada Penyakit Jantung' if target_value == 0 else 'Ada Penyakit Jantung')

# Menambahkan judul dan label
ax.set_title('Distribusi Detak Jantung Maksimum (thalach) Berdasarkan Status Penyakit Jantung', fontsize=14)
ax.set_xlabel('Detak Jantung Maksimum (thalach)', fontsize=12)
ax.set_ylabel('Jumlah Pasien', fontsize=12)
ax.legend(title='Kategori', fontsize=10)

# Menampilkan plot
plt.tight_layout()
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve

# Drop kolom yang tidak relevan
df_cleaned = df.drop(['fbs', 'restecg', 'chol'], axis=1)  # Tambahkan 'trestbps' atau 'thal' jika perlu

# Pisahkan fitur (X) dan target (y)
X = df_cleaned.drop('target', axis=1)  # Semua kolom kecuali target
y = df_cleaned['target']  # Target klasifikasi (1 = penyakit jantung, 0 = tidak)

# 3. Split dataset (70% training, 30% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# 4. Modeling
model = RandomForestClassifier(random_state=42, n_estimators=100)
model.fit(X_train, y_train)

# 5. Evaluasi Model
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))

import pickle
# Menyimpan model menjadi file .pkl
with open('ML_Jantung.pkl','wb') as file:
    pickle.dump(model, file)
    print("Model berhasil disimpan")